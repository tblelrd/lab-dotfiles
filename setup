#!/usr/bin/bash

set -u
START=$(date +%s%3N)

NET_HOME="/cs/home/$USER"
BIN_DIR="$NET_HOME/usr/bin"

LINES=$(tput lines)
BOTTOM_LINES=$((LINES/4))

function print_bottom () {
  local text=$@
  
  printf "\e7" # Save cursor location
  printf '\e[%s;%sr' "$((LINES-BOTTOM_LINES))" "$LINES" # New bottom scrollable region
  printf "\e[%s;1H" "$LINES"

  printf "\e[1;96m$text\n"

  printf '\e[%s;%sr' "0" "$((LINES-BOTTOM_LINES))" # Old top scrollable region
  printf "\e8" # Restore cursor location

  printf "\e[0m"
}

function update_script () {
  # Enter dotfiles directory
  print_bottom "Entering dotfiles directory"
  pushd "$NET_HOME/dotfiles"

  print_bottom "Fetching the remote"
  git fetch origin main

  local local_branch=$(git rev-parse main)
  local remote_branch=$(git rev-parse origin/main)

  if [[ $local_branch = $remote_branch ]]; then
    print_bottom "Up to date"
  else
    print_bottom "Updating, going to run other script"
    git pull origin main
    ./setup
    popd &> /dev/null
    exit
 fi
}

function init_script () {
  # Leave space for bottom lines
  for i in $(seq "$BOTTOM_LINES"); do
    printf "\n"
  done

  printf "\e7" # Save cursor location

  printf '\e[%s;%sr' "0" "$((LINES-BOTTOM_LINES))"

  printf "\e8" # Restore cursor location

  # Go back up the spaces made like 10 lines ago
  printf "\e[%sA" "$BOTTOM_LINES"
}

function deinit_script() {
  printf "\e7" # Save cursor location

  local i
  for i in $(seq "$BOTTOM_LINES"); do
    printf "\e[%s;1H" "$((LINES - i))"
    printf "\e[2K"
  done

  printf '\e[%s;%sr' "0" "$LINES"
  printf "\e8" # Restore cursor location
}

function download_dependencies () {
  print_bottom "Downloading Dependencies"

  print_bottom "[DEP] Checking if starship exists"
  if ! command -v starship > /dev/null; then
    print_bottom "[DEP] Starship not installed, downloading"
    curl -sSOJ https://starship.rs/install.sh 
    chmod +x ./install.sh
    ./install.sh -b "$BIN_DIR" --yes
    rm ./install.sh
  else 
    print_bottom "[DEP] Starship installed, skipping"
  fi

  print_bottom "[DEP] Checking if fastfetch exists"
  if [ ! -f "$BIN_DIR/fastfetch" ]; then
    print_bottom "[DEP:Fastfetch] Installing fastfetch"
    print_bottom "[DEP:Fastfetch] Cloning repository..."
    git clone --depth 1 https://github.com/fastfetch-cli/fastfetch.git fastfetch

    print_bottom "[DEP:Fastfetch] Starting Build"
    pushd fastfetch
    mkdir -p build/
    pushd build/
    cmake ..
    cmake --build . --target fastfetch "-j$(nproc)" 


    print_bottom "[DEP:Fastfetch] Moving binary to usr/bin"
    cp "$(pwd)/fastfetch" "$BIN_DIR/fastfetch"


    print_bottom "[DEP:Fastfetch] Cleaning up"
    popd 
    popd 
    rm -rf fastfetch
  else
    print_bottom "[DEP] Fastfetch installed, skipping"
  fi

  print_bottom "[DEP] Checking if neovim exists"
  if [ ! -f "$BIN_DIR/nvim" ]; then
    print_bottom "[DEP] Installing neovim"
    git clone -b "stable" --depth=1 "https://github.com/neovim/neovim" neovim
    pushd neovim
    print_bottom "[DEP::Neovim] Setting up make/cmake"
    make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX="$NET_HOME/usr"
    print_bottom "[DEP::Neovim] Installing to usr/bin"
    make install

    print_bottom "[DEP::Neovim] Cleaning up"
    popd
    rm -rf neovim
  else
    print_bottom "[DEP] Neovim installed, skipping"
  fi

  print_bottom "[DEP::Configuration] Configuring Fastfetch"
  mkdir -p ~/.config/fastfetch
  ln -sf $NET_HOME/dotfiles/configs/fastfetch.jsonc $HOME/.config/fastfetch/config.jsonc

  print_bottom "[DEP::Configuration] Configuring Fish"
  mkdir -p ~/.config/fish
  ln -sf $NET_HOME/dotfiles/fish/config.fish $HOME/.config/fish/config.fish

  print_bottom "[DEP::Configuration] Configuring Starship"
  ln -sf $NET_HOME/dotfiles/configs/starship.toml $HOME/.config/starship.toml

  print_bottom "[DEP::Configuration] Configuring Neovim"
  ln -sf "$NET_HOME/dotfiles/configs/nvim" $HOME/.config/nvim
}

function main () {
  trap deinit_script exit # Yeah
  trap deinit_script SIGINT # Yeah
  init_script

  update_script

  # Dependencies
  download_dependencies

  TIME=$(("$(date +%s%3N)" - START))

  printf "\n\nDone in \e[1;93m${TIME}ms!\e[0m\n"
}

main 
